<?php
/**
 * Processwire 'FrontendUserRegister' module
 * 
 * Frontend user register module.
 * 
 * @author pwFoo
 * @since 2015-03-10
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */
class FrontendUserRegister extends WireData implements Module {
    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * 
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'FrontendUserRegister',
            'summary' => 'Frontend to register users',
            'version' => '041',
            'requires'  => 'FormHelper>=061, ProcessWire>=2.5.18, PHP>=5.4.0',
        );
    }
   
    /** @var InputfieldForm PW form object extended by FormHelper */
    protected $form;
    
    /** @var User PW user object to collect the register information */
    protected $userObj;
    
    /** @var string Previously visited page */
    protected $previousPage;

    public function init() {
        // previous visited page
        $history = $this->session->getHistory();
        $this->previousPage = end($history)['url'];
        
        // Load CSS / JS custom or default files
        $this->loadCssJs();
    }
    
    public function register($redirect = null) {
        $redirect = ($redirect ? $redirect : $this->previousPage);
        $this->buildRegisterForm();
        $this->userObj = new User();
        
        if($this->form->fhProcessForm() && !empty($this->saveUser())) {
            $this->session->redirect($redirect, false);
        }
        return $this->form;
    }
        
    /**
     * Save the temp User object
     * @return object Saved user object
     */
    protected function ___saveUser($callback = null) {
        $this->userObj->save();   // if sucesfully saved user id changed from 0 to saved id
        return !empty($this->userObj->id);
    }
   
    /**
     * Build the register form with basic fields
     * @return object Processwire form object
     */
    protected function buildRegisterForm() {
        $this->form = $this->modules->get('FormHelper')->create();
        $this->form->attr('id+name', 'fuRegisterForm');
        $this->form->fhSubmitBtn->attr('value', $this->_('Register'));
        $this->form->add($this->fieldUsername());
        $this->form->add($this->fieldEmail());
        $this->form->add($this->fieldPassword());
    }
    
    /**
     * Username form field
     * @return object Username field
     */
    protected function fieldUsername() {
        $field = $this->modules->get('InputfieldText');
        $field->label = $this->_('Username');
        $field->attr('id+name', 'username');
        $field->required = 1;
        $field->fhSanitizer = 'username';
        $field->addHook('fhCallbackProcessed', function($event) {
            $field = $event->object;
            $username = $this->form->fhValue($field->name);
            
            if (empty($username))   return;
            elseif (wire('users')->count("name={$username}") == 0) {
                $this->userObj->name = $username;
            }
            else {
                $field->error(__('Username already taken!'));  
            }
        });
        return $field;
    }
    
    /**
     * Email form field
     * @return object Email field
     */
    protected function fieldEmail() {
        $field = $this->modules->get('InputfieldEmail');
        $field->label = $this->_('Email');
        $field->attr('id+name', 'email');
        $field->required = 1;
        $field->addHook('fhCallbackProcessed', function($event) {
            $field = $event->object;
            $email = $this->form->fhValue($field->name);
            
            if (empty($email))  return;
            elseif (wire('users')->count("email={$email}") == 0) {
                $this->userObj->email = $email;
            }
            else {
                $field->error(__('Email address already taken!'));
            }
        });
        return $field;
    }
    
    /**
     * Password form field
     * @return object Password field
     */
    protected function fieldPassword() {
        $field = $this->modules->get('InputfieldPassword');
        $field->label = $this->_('Password');
        $field->attr('id+name', 'password');
        $field->required = 1;
        $field->addHook('fhCallbackProcessed', function($event) {
            $field = $event->object;
            $this->userObj->pass = $field->value;
            $field->value = '';
        });
        return $field;
    }
    
    /**
     * Load custom or default module styles / scripts
     */
    protected function loadCssJs() {
        $this->getCssJs("{$this}.css", 'styles');
        $this->getCssJs("{$this}.js", 'scripts');
    }
    
    /**
     * 
     * @param string $file Filename to load
     * @param string $type File type scripts or styles
     */
    protected function getCssJs($file, $type) {
        $custom = $this . '/' . $file;
        if (file_exists($this->config->paths->templates . $custom)) {
            $this->config->$type->add($this->config->urls->templates . $custom);
        }
        else {
            $defaultFile = "{$this->config->urls->FrontendUserLogin}{$type}/$file";
            $this->config->$type->add($defaultFile);
        }
    }
}