<?php
/**
 * Processwire 'FrontendUserRegister' module
 * 
 * Frontend user register module.
 * 
 * @author pwFoo
 * @since 2015-03-10
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */
require_once('FrontendUser.class.php');
class FrontendUserRegister extends FrontendUser {
    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * 
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'FrontendUserRegister',
            'summary' => 'Frontend to register users',
            'version' => '040',
        );
    }

    public function init() {
        $this->userObj = new User();
    }


    /**
     * Handling and prepare register process
     * @param string $redirect Destination after register a new user
     * @param array $callback Set preRegister and postRegister callbacks
     */
    public function register($redirect = null, $callback = null) {
        $this->form = $this->buildRegisterForm();
        $this->redirect = $redirect;
        
        // process form and save new user, redirect if userId is set during userSave()
        if ($this->processForm() && $this->saveUser($callback)) {
            $this->session->redirect($this->redirect, false);
        }
        return $this;
    }
        
    /**
     * Save the temp User object
     * @return object Saved user object
     */
    protected function ___saveUser($callback = null) {
        if (!empty($callback['preRegister']))    $callback['preRegister']($this);
        $this->userObj->save();   // if sucesfully saved user id changed from 0 to saved id
        if (!empty($callback['postRegister']))   $callback['postRegister']($this);
        return $this->userObj->id;
    }
   
    /**
     * Build the register form with basic fields
     * @return object Processwire form object
     */
    protected function buildRegisterForm() {
        $form = $this->formObj();
        $form->add($this->fieldUsername());
        $form->add($this->fieldEmail());
        $form->add($this->fieldPassword());
        $form->add($this->fieldSubmit());
        return $form;
    }
    
    /**
     * Create PW form object
     * @return object InputfieldForm
     */
    protected function formObj() {
        $form = $this->modules->get('InputfieldForm');
        $form->action = './';
        $form->method = 'post';
        $form->attr('id+name', 'fuRegisterForm');  
        return $form;
    }
    
    /**
     * Username form field
     * @return object Username field
     */
    protected function fieldUsername() {
        $field = $this->modules->get('InputfieldText');
        $field->label = $this->_('Username');
        $field->attr('id+name', 'username');
        $field->required = 1;
        $field->fulOption = array(
            'callbackProcess' => function ($field, $module) {
                $username = wire('sanitizer')->username($field->value);
                if (!empty($username) && wire('users')->count("name={$username}") == 0) {
                    $module->attr('userObj')->name = $username;
                }
                else {
                    $field->error(__('Username already taken!'));
                }
            }
        );
        return $field;
    }
    
    /**
     * Email form field
     * @return object Email field
     */
    protected function fieldEmail() {
        $field = $this->modules->get('InputfieldEmail');
        $field->label = $this->_('Email');
        $field->attr('id+name', 'email');
        $field->required = 1;
        $field->fulOption = array(
            'callbackProcess' => function ($field, $module) { 
                $email = wire('sanitizer')->email($field->value);       
                if (empty($email))  return;
                elseif (wire('users')->count("email={$email}") == 0) {
                     $module->attr('userObj')->email = $email;
                }
                else {
                    $field->error(__('Email address already taken!'));         
                }                  
            }
        );
        return $field;
    }
    
    /**
     * Password form field
     * @return object Password field
     */
    protected function fieldPassword() {
        $field = $this->modules->get('InputfieldPassword');
        $field->label = $this->_('Password');
        $field->attr('id+name', 'password');
        $field->required = 1;
        
        $field->fulOption = array(
            'callbackProcess' => function ($field, $module) {
                $pass = (string)$field->value;                                      
                $module->attr('userObj')->pass = $pass;                          
            }
        );
        return $field;
    }
    
    /**
     * Form submit button
     * @return object Submit button
     */
    protected function fieldSubmit() {
        $submit = $this->modules->get('InputfieldSubmit');
        $submit->skipLabel = 4; // Inputfield::skipLabelBlank;
        $submit->attr('value', $this->_('Register'));
        $submit->attr('id+name', 'fuLoginRegister');
        return $submit;
    }
}