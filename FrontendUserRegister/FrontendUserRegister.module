<?php
/**
 * Processwire 'FrontendUserRegister' module
 * 
 * Frontend user register module.
 * 
 * @author pwFoo
 * @since 2015-03-10
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */

require_once(__DIR__.'/../FrontendUser/FrontendUser.class.php');

class FrontendUserRegister extends FrontendUser {
    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * 
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'FrontendUserRegister',
            'summary' => 'Frontend to register users',
            'version' => '050',
            'requires'  => 'FormHelper>=0.7.0, ProcessWire>=2.5.18',
        );
    }
    
    /**
     * module initialization, required by module interface
     */
    public function init() {
        $this->userObj = new User();    // Create User object
    }

    /**
     * Build form with fields
     * @param array $fields Array of form fields
     */
    public function form($fields = array('username', 'email', 'password')) {
        $this->buildForm($fields);  // Build basic form
        $this->form->attr('id+name', 'fuRegisterForm');
        $this->form->fhSubmitBtn->attr('value', $this->_('Register'));
        return $this;
    }
    
    /**
     * Process user register with validated form input
     * @param string $redirect Redirect destination url
     */
    public function process($redirect = null) {
        if ($this->form->fhState) {
            if ($this->saveUser($this->userObj) === true) {
                $this->session->redirect($redirect, false);     // User sucessfully registered
            }
            else {
                $this->form->fhSubmitBtn->error($this->_('Register process unexpected failed!'));       // Save user failed?
            }        
        }
        return $this;
    }
    
    /**
     * Save the temp User object
     * @param User $user Temp User object to save
     * @return boolean Sucessful (true) saved or not (false)
     */
    protected function ___saveUser($user) {
        if (empty($user->name) || empty($user->email) || $user->pass->hash == '') {
            return false;   // Missing required user values (name, email, pass)
        }
        return $user->save();
    }
    
    /**
     * Username form field
     * @return InputfieldText Username field
     */
    protected function username() {
        $field = $this->modules->get('InputfieldText');
        $field->label = $this->_('Username');
        $field->attr('id+name', 'username');
        $field->required = 1;
        $field->fhSanitizer = 'username';
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $username = $this->form->fhValue($field->name);
            
            if (empty($username))   return;
            elseif (wire('users')->count("name={$username}") == 0) {
                $this->userObj->name = $username;
            }
            else {
                $field->error(__('Username already taken!'));  
            }
        });
        return $field;
    }
    
    /**
     * Email form field
     * @return InputfieldEmail Email field
     */
    protected function email() {
        $field = $this->modules->get('InputfieldEmail');
        $field->label = $this->_('Email');
        $field->attr('id+name', 'email');
        $field->required = 1;
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $email = $this->form->fhValue($field->name);
            
            if (empty($email))  return;
            elseif (wire('users')->count("email={$email}") == 0) {
                $this->userObj->email = $email;
            }
            else {
                $field->error(__('Email address already taken!'));
            }
        });
        return $field;
    }
    
    /**
     * Password form field
     * @return InputfieldPassword Password field
     */
    protected function password() {
        $field = $this->modules->get('InputfieldPassword');
        $field->label = $this->_('Password');
        $field->attr('id+name', 'password');
        $field->required = 1;
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $this->userObj->pass = $field->value;
        });
        $field->addHookBefore('render', function($event) {
            $field = $event->object;
            $field->value = '';
        });
        return $field;
    }
}