<?php
/**
 * Processwire 'FrontendUser' module
 * 
 * Frontend user login, logout and registration.
 * 
 * @author pwFoo
 * @since 2015-04-15
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */
class FrontendUser extends WireData implements Module {
    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * 
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'FrontendUser',
            'summary' => 'Frontend user login, logout and registration',
            'version' => '081',
            'requires'  => 'FormHelper>=0.7.0',
        );
    }
    
    /** @var object Temp User object to store values */
    protected $userObj;
    
    /** @var InputfieldForm PW form object */
    protected $form;
    
    /** @var string Option "Login" or "Register" */
    protected $action;
    
    /**
     * module initialization, required by module interface
     */
    public function init() { }
    
    /**
     * Build login form
     * @param array $fields Optional field with initial form fields
     */
    public function login ($fields = array('username', 'password')) {
        $this->userObj = new stdClass();    // Create a object to store login credentials
        $this->action = 'Login';
        $this->buildForm($fields);
        
        // Set form attributes
        $this->form->attr('id+name', 'fuLoginForm');
        $this->form->fhSubmitBtn->attr('value', $this->_('Login'));
        
        return $this;
    }
    
    /**
     * Build registration form
     * @param array $fields Optional field with initial form fields
     */
    public function register ($fields = array('username', 'email', 'password')) {
        $this->userObj = new User();    // Create temp User object to store input
        $this->action = 'Register';
        $this->buildForm($fields);
        
        // Set form attributes
        $this->form->attr('id+name', 'fuRegisterForm');
        $this->form->fhSubmitBtn->attr('value', $this->_('Register'));
        
        return $this;
    }

    /**
     * Logout and redirect guest
     * @param string $redirect Redirect destination URL
     */
    public function ___logout ($redirect) {
        $this->session->logout();
        $this->session->redirect($redirect, false);
    }
    
    /**
     * Process user register with validated form input
     * @param string $redirect Redirect destination url
     */
    public function process($redirect) {
        if ($this->form->fhProcessForm()) {
            switch ($this->action) {
                case 'Login':
                    $result = $this->auth($this->userObj);
                  break;
                case 'Register':
                    $result = $this->save($this->userObj);
                  break;
            }
            if ($result === true) {
                $this->session->redirect($redirect, false);     // User sucessfully registered
            }
            else {
                $this->form->fhSubmitBtn->error($result);       // Save user failed?
            }        
        }
        return $this;
    }

    /**
     * Render current form
     * @return html Rendered form
     */
    public function ___render() {
        return $this->form->render();
    }
    
    /** 
     * Get / set class attributes
     * @param string $key Name of the class variable
     * @param variable $value Optional new value to set
     */
    public function attr($key, $value = null) {
        if ($value === null) return $this->$key;
        $this->$key = $value;
    }
    
    /**
     * Execute login with error handling
     * @param object $user User object with login name and password
     * @return true|string True if sucessfully logged in or an error message
     */
    protected function ___auth($user) {
        try {
            $result = $this->session->login($user->name, $user->pass);
            if ($result instanceof User) {
                return true;
            }
            return $this->_('Login failed!');
        }
        catch(Exception $e) {
            return $e->getMessage();
        }
    }
    
    /**
     * Save the temp User object
     * @param User $user Temp User object to save
     * @return boolean Sucessful (true) saved or not (false)
     */
    protected function ___save($user) {
        if (empty($user->name) || empty($user->email) || $user->pass->hash == '') {
            return $this->_('Register process unexpected failed!');
        }
        if ($user->save()) {
            return true;
        }
        return $this->_('User registration failed!');
    }

    /**
     * Build form with fields
     * @param array $fields Array of form fields
     */
    protected function buildForm($fields) {
        $this->form = $this->modules->get('FormHelper')->create();

        foreach ($fields as $field) {
            if (is_string($field)) {
                $funcName = "{$field}{$this->action}";
                $field = $this->$funcName();
            }
            $this->form->add($field);
        }
        // Load custom or default styles and scripts
        $this->getCssJs("{$this}{$this->action}.css", 'styles');
        $this->getCssJs("{$this}{$this->action}.js", 'scripts');
    }
    
    /**
     * Load custom or default styles / scripts
     * @param string $file Filename to load
     * @param string $type File type styles or scripts
     */
    protected function getCssJs($file, $type) {
        $custom = $this . '/' . $file;
        if (file_exists($this->config->paths->templates . $custom)) {
            $file = $this->config->urls->templates . $custom;
        }
        else {
            $file = "{$this->config->urls->$this}{$type}/$file";
        }
        $this->config->$type->add($file);
    }

    /**
     * Build username form field
     * @return InputfieldText Form field username
     */
    protected function usernameLogin() {
        $field = $this->modules->get('InputfieldText');
        $field->skipLabel = 4; // Inputfield::skipLabelBlank;
        $field->placeholder = $this->_('Username');
        $field->attr('id+name', 'username');
        $field->required = 1;
        $field->fhSanitizer = 'username';
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $this->userObj->name = $this->form->fhValue($field->name);
        });
        return $field;
    }
    
    /**
     * Build password form field with additional type password 
     * @return InputfieldText Form field password
     */
    protected function passwordLogin() {
        $field = $this->modules->get('InputfieldText');
        $field->skipLabel = 4; // Inputfield::skipLabelBlank;
        $field->placeholder = $this->_('Password');
        $field->attr('id+name', 'password');
        $field->attr('type','password');
        $field->required = 1;
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $this->userObj->pass = $field->value;
        });
        $field->addHookBefore('render', function($event) {
            $field = $event->object;
            $field->value = '';
        });
        return $field;
    }
    
    /**
     * Username form field
     * @return InputfieldText Username field
     */
    protected function usernameRegister() {
        $field = $this->modules->get('InputfieldText');
        $field->label = $this->_('Username');
        $field->attr('id+name', 'username');
        $field->required = 1;
        $field->fhSanitizer = 'username';
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $username = $this->form->fhValue($field->name);
            
            if (empty($username))   return;
            elseif (wire('users')->count("name={$username}") == 0) {
                $this->userObj->name = $username;
            }
            else {
                $field->error(__('Username already taken!'));  
            }
        });
        return $field;
    }
    
    /**
     * Email form field
     * @return InputfieldEmail Email field
     */
    protected function emailRegister() {
        $field = $this->modules->get('InputfieldEmail');
        $field->label = $this->_('Email');
        $field->attr('id+name', 'email');
        $field->required = 1;
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $email = $this->form->fhValue($field->name);
            
            if (empty($email))  return;
            elseif (wire('users')->count("email={$email}") == 0) {
                $this->userObj->email = $email;
            }
            else {
                $field->error(__('Email address already taken!'));
            }
        });
        return $field;
    }
    
    /**
     * Password form field
     * @return InputfieldPassword Password field
     */
    protected function passwordRegister() {
        $field = $this->modules->get('InputfieldPassword');
        $field->label = $this->_('Password');
        $field->attr('id+name', 'password');
        $field->required = 1;
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $this->userObj->pass = $field->value;
        });
        $field->addHookBefore('render', function($event) {
            $field = $event->object;
            $field->value = '';
        });
        return $field;
    }
    
    /**
     * Plugin LoginPersist module integration
     * @return Inputfield "Remember me" checkbox
     */
    protected function persistLogin() {
        $persist = $this->modules->get('InputfieldCheckboxes');
        $persist->name = 'persist';
        $persist->attr('id+name', 'persist');
        $persist->skipLabel = 4;
        $persist->addoption('persist', $this->_('Remember me?'));
        $persist->addHookAfter('Session::login', function($event) use (&$persist) {
            if (isset($persist->value[0]) && $persist->value[0] === 'persist') {
                $this->modules->get('LoginPersist')->persist();
            }
        });
        return $persist;
    }
    
    /**
     * Plugin ProcessForgotPassword core module integration
     * @return Inputfield Markup field with "Forgot password" link
     */
    protected function forgotLogin() {
        $forgot = $this->modules->get('InputfieldMarkup');
        $forgot->value = "<a href='{$this->page->url}?forgot=1'>{$this->_('Forgot password?')}</a>";
        $forgot->addHookBefore('FrontendUser::render', function($event) {
            if (wire('input')->get->forgot) {
                //wire('config')->styles->add('/pw/wire/modules/AdminTheme/AdminThemeDefault/styles/main-classic.css');
                $event->return = wire('modules')->get('ProcessForgotPassword')->execute();
                $event->replace = true;
             }   
        });
        return $forgot;    
    }
    
    /**
     * Plugin email pre-registration validation: form field
     * @return Inputfield PW form field
     */
    protected function emailValidationRegister() {
        $this->form->addhookBefore('processInput', $this, 'hookRegisterFormBeforeProcess');
        $this->form->addhookAfter('processInput', $this, 'hookRegisterFormAfterProcess');
        $this->form->addhookBefore('render', $this, 'hookRegisterFormBeforeRender');
        
        $validation = wire('modules')->get('InputfieldText');
        $validation->attr('id+name', 'EmailPreValidation');
        $validation->placeholder = $this->_('Email validation code');
        $validation->skipLabel = 4;
        $validation->required = 1;        
        return $validation;
    }
    
    /**
     * Plugin email pre-registration validation: Initial form manipulation before form process
     * @param hookEvent $event
     */
    protected function hookRegisterFormBeforeProcess($event) {
        $form = $event->object;
        //var_dump(wire('input')->post); echo "<hr />";
        if (empty(wire('session')->get('registerStep'))) {
            $form->get('password')->required = false;
            $form->get('EmailPreValidation')->required = false;
        }
    }

    /**
     * Plugin email pre-registration validation: Email validation code handling after form process
     * @param hookEvent $event
     */
    protected function hookRegisterFormAfterProcess($event) {
        $form = $event->object;
        $user = $form->get('username');
        $email = $form->get('email');
    
        if (!empty(wire('session')->get('registerStep')) && wire('session')->get('registerEmail') !== $form->fhValue('email')) {
            wire('session')->remove('registerStep');
            $form->get('EmailPreValidation')->value = '';
            $form->fhSubmitBtn->error('Validation broken by email address mismatch!');
            wire('session')->redirect(wire('page')->url, false);
        }
        elseif (empty(wire('session')->get('registerStep')) && !count($user->getErrors()) && !count($email->getErrors())) {
            wire('session')->set('registerToken', md5(uniqid(mt_rand(), true)));
            wire('session')->set('registerUsername', $form->fhValue('username'));
            wire('session')->set('registerEmail', $form->fhValue('email'));
            wire('session')->set('registerStep', 1);
            // Send validation code email
            $token = wire('session')->get('registerToken');
            $url = wire('page')->httpUrl;
            $subject = 'Email address pre-validation';
            $content = "Validation token: {$token}\n{$url}?registerToken={$token}";
            wireMail($form->fhValue('email'), null, $subject , $content);        
        }
        elseif (!count($user->getErrors()) && !count($email->getErrors())) {
            if ($form->fhValue('EmailPreValidation') != wire('session')->get('registerToken')) {
                $form->get('EmailPreValidation')->error('Email validation code NOT match!');
            }
        }
    }

    /**
     * Plugin email pre-registration validation: Check registration state before form render
     * @param hookEvent $event
     */
    protected function hookRegisterFormBeforeRender($event) {
        $form = $event->object;
    
        if (wire('input')->get('registerToken') === wire('session')->get('registerToken')) {
            $form->get('username')->value = wire('session')->get('registerUsername');
            $form->get('email')->value = wire('session')->get('registerEmail');
            $form->get('EmailPreValidation')->value = wire('session')->get('registerToken');
        }
        elseif ($form->fhState === null) {
            wire('session')->remove('registerStep');
        }
        elseif (wire('session')->get('registerStep') === 1) {
            $form->fhSubmitBtn->getErrors(true);
        }
        if (empty(wire('session')->get('registerStep'))) {
            $form->remove($form->get('password'));
            $form->get('EmailPreValidation')->attr('disabled', true);
            $form->fhSubmitBtn->value = 'Send email validation code';
            
            wire('session')->remove('registerToken');
            wire('session')->remove('registerUsername');
            wire('session')->remove('registerEmail');
        }
    }
}