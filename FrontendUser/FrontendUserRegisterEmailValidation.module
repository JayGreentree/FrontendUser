<?php
/**
 * Processwire 'FrontendUserRegisterEmailValidation' module
 * 
 * Extends FrontendUser with email pre-registration validation feature.
 * 
 * @author pwFoo
 * @since 2015-05-13
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */
class FrontendUserRegisterEmailValidation extends WireData implements Module {
    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * 
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'FrontendUserRegisterEmailValidation',
            'summary' => 'Extends FrontendUser with email pre-registration validation feature',
            'version' => '001',
            'requires'  => 'FrontendUser>=0.8.3',
        );
    }
    
    /** @var FrontendUser The parent module object / instance */
    protected $fu;
    
    public function init() { }
    
    /**
     * Plugin email pre-registration validation: form field
     * @param InputfieldForm $form PW form object to add needed hooks to
     * @return Inputfield PW form field
     */
    public function emailValidationRegister($fu) {
        $this->fu = $fu;
        $form = $fu->attr('form');
        $form->addhookBefore('processInput', $this, 'hookRegisterFormBeforeProcess');
        $form->addhookAfter('processInput', $this, 'hookRegisterFormAfterProcess');
        $form->addhookBefore('render', $this, 'hookRegisterFormBeforeRender');
        
        $validation = $this->modules->get('InputfieldText');
        $validation->attr('id+name', 'EmailPreValidation');
        $validation->placeholder = $this->_('Email validation code');
        $validation->skipLabel = 4;
        $validation->required = 1;        
        return $validation;
    }
    
    /**
     * Plugin email pre-registration validation: Initial form manipulation before form process
     * @param hookEvent $event
     */
    protected function hookRegisterFormBeforeProcess($event) {
        $form = $event->object;
        
        if (empty(wire('session')->get('registerStep'))) {
            $form->get('password')->required = false;
            $form->get('EmailPreValidation')->required = false;
        }
    }

    /**
     * Plugin email pre-registration validation: Email validation code handling after form process
     * @param hookEvent $event
     */
    protected function hookRegisterFormAfterProcess($event) {
        $form = $event->object;
        $user = $form->get('username');
        $email = $form->get('email');
    
        if (!empty(wire('session')->get('registerStep')) && wire('session')->get('registerEmail') !== $form->fhValue('email')) {
            wire('session')->remove('registerStep');
            $form->get('EmailPreValidation')->value = '';
            $form->fhSubmitBtn->error('Validation broken by email address mismatch!');
            wire('session')->redirect(wire('page')->url, false);
        }
        elseif (empty(wire('session')->get('registerStep')) && !count($user->getErrors()) && !count($email->getErrors())) {
            wire('session')->set('registerToken', md5(uniqid(mt_rand(), true)));
            wire('session')->set('registerUsername', $form->fhValue('username', 'text'));
            wire('session')->set('registerEmail', $form->fhValue('email'));
            wire('session')->set('registerStep', 1);
            // Send validation code email
            
            // Set template variables
            $vars = array(
                'username'  => wire('session')->get('registerUsername'),
                'email'     => wire('session')->get('registerEmail'),
                'token'     => wire('session')->get('registerToken'),
                'url'       => wire('page')->httpUrl . '?registerToken=' . wire('session')->get('registerToken'),
                'content'   => $this->content,  // config variable
            );

            // Load the plain / html email templates
            $emailContentHtml = wire('page')->render($this->fu->getFile('validationEmail.php', 'templates'), $vars);
            $emailContentPlain = preg_replace('/^\h+|\h+$/m', '', strip_tags($emailContentHtml));
            // Get config value
            $subject = $this->subject;
            
            // send registration token email
            $mail = wireMail();
            $mail->to($form->fhValue('email'))->subject($subject);
            $mail->body($emailContentPlain)->bodyHTML($emailContentHtml);
            $mail->send();
        }
        elseif (!count($user->getErrors()) && !count($email->getErrors())) {
            if ($form->fhValue('EmailPreValidation') != wire('session')->get('registerToken')) {
                $form->get('EmailPreValidation')->error('Email validation code NOT match!');
            }
        }
    }

    /**
     * Plugin email pre-registration validation: Check registration state before form render
     * @param hookEvent $event
     */
    protected function hookRegisterFormBeforeRender($event) {
        $form = $event->object;
    
        if (wire('input')->get('registerToken') === wire('session')->get('registerToken')) {
            $form->get('username')->value = wire('session')->get('registerUsername');
            $form->get('email')->value = wire('session')->get('registerEmail');
            $form->get('EmailPreValidation')->value = wire('session')->get('registerToken');
        }
        elseif ($form->fhState === null) {
            wire('session')->remove('registerStep');
        }
        elseif (wire('session')->get('registerStep') === 1) {
            $form->fhSubmitBtn->getErrors(true);
        }
        if (empty(wire('session')->get('registerStep'))) {
            $form->remove($form->get('password'));
            $form->get('EmailPreValidation')->attr('disabled', true);
            $form->fhSubmitBtn->value = 'Send email validation code';
            
            wire('session')->remove('registerToken');
            wire('session')->remove('registerUsername');
            wire('session')->remove('registerEmail');
        }
    }
}