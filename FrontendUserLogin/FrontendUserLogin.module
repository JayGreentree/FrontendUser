<?php
/**
 * Processwire 'FrontendUserLogin' module
 * 
 * Login and logout frontend users.
 * 
 * @author pwFoo
 * @since 2015-03-10
 * 
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 */

require_once(__DIR__.'/../FrontendUser/FrontendUser.class.php');

class FrontendUserLogin extends FrontendUser {
    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     * 
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'FrontendUserLogin',
            'summary' => 'Login and logout frontend users',
            'version' => '060',
            'requires'  => 'FormHelper>=0.7.0, ProcessWire>=2.5.18, PHP>=5.4.0',
        );
    }

    /**
     * module initialization, required by module interface
     */
    public function init() {
        $this->userObj = new stdClass;    // Create custom User object
        $this->previousPage();          // referer page
    }

    /**
     * Build form with fields
     * @param array $fields Array of form fields
     */
    public function form($fields = array('username', 'password')) {
        $this->buildForm($fields);  // Build basic form
        $this->form->attr('id+name', 'fuLoginForm');
        $this->form->fhSubmitBtn->attr('value', $this->_('Login'));
        return $this;
    }
    
    /**
     * Check / process login with validated form input
     * @param string $redirect Redirect destination url
     */
    public function login($redirect = null) {
        $redirect = ($redirect ? $redirect : $this->previousPage);
        if ($this->form->fhState()) {
            $result = $this->auth($this->userObj->name, $this->userObj->pass);
            if ($result === true) {
                $this->session->redirect($redirect, false);     // Login sucessful
            }
            else {
                $this->form->fhSubmitBtn->error($result);       // login error / login throttle       
            }
        }
        return $this;
    }
    
    /**
     * Handling and prepare logout process
     * @param string $redirect Destination after logout
     */
    public function logout($redirect = null) {
        $redirect = ($redirect ? $redirect : $this->previousPage);
        $this->session->logout();
        $this->session->redirect($redirect, false);
    }
    
    /**
     * Execute login with error handling
     * @return true|string True if sucessfully logged in or an error message
     */
    protected function ___auth($user, $pass) {
        try {
            $result = $this->session->login($user, $pass);
            if ($result instanceof User) {
                return true;
            }
            return $this->_('Login failed!');
        }
        catch(Exception $e) {
            return $e->getMessage();
        }
    }

    /**
     * Build username form field
     * @return InputfieldText Form field username
     */
    protected function username() {
        $field = $this->modules->get('InputfieldText');
        $field->skipLabel = 4; // Inputfield::skipLabelBlank;
        $field->placeholder = $this->_('Username');
        $field->attr('id+name', 'username');
        $field->required = 1;
        $field->fhSanitizer = 'username';
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $this->userObj->name = $this->form->fhValue($field->name);
        });
        return $field;
    }
    
    /**
     * Build password form field with additional type password 
     * @return InputfieldText Form field password
     */
    protected function password() {
        $field = $this->modules->get('InputfieldText');
        $field->skipLabel = 4; // Inputfield::skipLabelBlank;
        $field->placeholder = $this->_('Password');
        $field->attr('id+name', 'password');
        $field->attr('type','password');
        $field->required = 1;
        $field->addHookAfter('processInput', function($event) {
            $field = $event->object;
            $this->userObj->pass = $field->value;
        });
        $field->addHookBefore('render', function($event) {
            $field = $event->object;
            $field->value = '';
        });
        return $field;
    }
}